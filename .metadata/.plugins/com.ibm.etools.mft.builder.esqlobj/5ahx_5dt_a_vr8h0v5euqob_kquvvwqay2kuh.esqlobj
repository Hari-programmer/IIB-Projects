CREATE COMPUTE MODULE Convert_char_Compute2
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
--		DECLARE I INTEGER 1;
--		
--		FOR LRef AS InputLocalEnvironment.DFDL.InputCSV.record[] DO
--			FOR IRef AS InputRoot.XMLNSC. 




          
          
          SET OutputRoot.DFDL.Output_char.record[i].ID = Ref.ID;	
----		SET OutputRoot.DFDL.Output_char.record[i].ROW_ID = Ref.ROW_ID;	
----		SET OutputRoot.DFDL.Output_char.record[i].EXTERNALID = Ref.EXTERNALID;	
----		SET OutputRoot.DFDL.Output_char.record[i].STORETIME = Ref.STORETIME;	
----		SET OutputRoot.DFDL.Output_char.record[i].OU = Ref.OU;	
----		SET OutputRoot.DFDL.Output_char.record[i].ROUTINGREQ = Ref.ROUTINGREQ;	
----		SET OutputRoot.DFDL.Output_char.record[i].MQHEADERENC = Ref.MQHEADERENC;
----		SET OutputRoot.DFDL.Output_char.record[i].MSGTYPE = Ref.MSGTYPE;
----		SET OutputRoot.DFDL.Output_char.record[i].DIRECTION = Ref.DIRECTION;
----		SET OutputRoot.DFDL.Output_char.record[i].QUEUETYPE = Ref.QUEUETYPE;
----		SET OutputRoot.DFDL.Output_char.record[i].LOCKTIME = Ref.LOCKTIME;
----		SET OutputRoot.DFDL.Output_char.record[i].POSSIBLEDUPLICATE = Ref.POSSIBLEDUPLICATE;
            SET OutputRoot.DFDL.Output_char.record[i].MQHEADER = Ref.POSSIBLEDUPLICATE;
            SET OutputRoot.DFDL.Output_char.record[i].COMIBMDNI = Ref.POSSIBLEDUPLICATE;
            SET OutputRoot.DFDL.Output_char.record[i].PAYLOAD = Ref.POSSIBLEDUPLICATE;




            SET OutputRoot.DFDL.Output_char.record[i].MSGDOMAIN = Ref.MSGDOMAIN;
----		SET OutputRoot.DFDL.Output_char.record[i].QUEUE = Ref.QUEUE;
----		SET OutputRoot.DFDL.Output_char.record[i].LOCALADDRESS = Ref.LOCALADDRESS;
----		SET OutputRoot.DFDL.Output_char.record[i].REMOTEADDRESS = Ref.REMOTEADDRESS;
----		SET OutputRoot.DFDL.Output_char.record[i].LOCKUSER = Ref.LOCKUSER;
----		SET OutputRoot.DFDL.Output_char.record[i].LASTCHGUSER = Ref.LASTCHGUSER;
--			
--			
--		END FOR;
		
		
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;