CREATE PROCEDURE DnqErCommon_PutMessageToErQueue
(
	INOUT rEnvironment            REFERENCE,
	IN    rInputLocalEnvironment  REFERENCE,
	INOUT rOutputLocalEnvironment REFERENCE,
	IN    rInputRoot              REFERENCE,
	INOUT rOutputRoot             REFERENCE,
	IN    bUpdateMessage          BOOLEAN,
	IN    iMsgId                  INT -- for update only, otherwise set it to 0 in the procedure call
)
/* ---------------------------------------------------------------------------------------
 * DESCRIPTION
 *   Puts a message to an ER queue, that is, inserts/updates a record into/in
 *   the following MER database tables:
 *   - DNQE_MESSAGES
 *   - DNQE_ME_DNIFIN   (in case of a FIN message) 
 *   - DNQE_ME_DNIFUNDS (in case of msg domain DNIFUNDS)
 *   - DNQE_ME_DNIENI   (in case of msg domain DNIENI)
 *
 * PARAMETERS
 *   rEnvironment            - Reference to the Environment
 *   rInputLocalEnvironment  - Reference to the InputLocalEnvironment
 *   rOutputLocalEnvironment - Reference to the OutputLocalEnvironment
 *   rInputRoot              - Reference to the InputRoot
 *   rOutputRoot             - Reference to the OutputRoot
 *   bUpdateMessage          - Flag indicating if message in MER database table is
 *                             to be inserted or updated where:
 *                             o  FALSE - insert the message
 *                             o  TRUE  - update the message
 *   iMsgId                  - ID of message that is to be updated (only used if
 *                             bUpdateMessage = TRUE)
 *
 * NOTE: This procedure is used by the following ESQL modules:
 *       - ComIbmDnqErQueueOutput.esql
 *         (namely, by compute module ComIbmDnqErQueueOutput_ProcessOriginal
 *          if, and only if, property "Allow manipulation" of node ComIbmDnqErQueueOutput
 *          is set to value YES)
 *       - ComIbmDnqErCommon.esql, that is, the ESQL module in hand
 *         (namely, by compute module DnqErCommon_PutMsg2ERQ)
 * --------------------------------------------------------------------------------------- */
BEGIN
	DECLARE rTrace REFERENCE TO rEnvironment;
	DECLARE xComIbmDni  BLOB;
	DECLARE chMsgDomain CHAR rInputRoot.MQRFH2.ComIbmDni.MsgStandardInfo.Domain;

	CALL DnqUtil_CopyScpnToEnv(rInputLocalEnvironment, rEnvironment);

	/**  Notes:
	 **  - Next statement is required. Otherwise, for example,
	 **    node ComIbmDnqErFinInput encounters the following exception:
	 **    DNIX2302E: Function 'DniAuditMessage':
	 **               Element 'Environment.ComIbmDni.Properties.Common.LastUpdate' missing.
	 **  - Technically, the ComIbmDniSelConfigProvider node should not provide
	 **    the LastUpdate field in the local (!) environment, but in the environment itself.
	 **    However, this error is not yet fixed ...
	 **/
	SET rEnvironment.ComIbmDni.Properties.Common.LastUpdate = rInputLocalEnvironment.ComIbmDni.Properties.Common.LastUpdate;
	
	DECLARE chFinRefConfigValue CHAR '';

	IF (rEnvironment.Variables.ComIbmDni.Dnq.NodeType = chNodeTypeFin) OR (chMsgDomain = 'DNIFIN') THEN
		-- FIN
		DELETE FIELD rOutputRoot.MQRFH2.ComIbmDni.Dnf.FIN.MTFIN;
	ELSE
		-- MSIF
		CREATE FIELD rEnvironment.ComIbmDni.Dnq.ER; -- required for ER header API
	END IF;

	CREATE FIELD rEnvironment.Variables.ComIbmDni.Dnq.Trace AS rTrace;

	SET rOutputRoot.MQRFH2.ComIbmDni.Dnq.ExternalMessageId = rInputRoot.MQMD.MsgId;

	CALL DnqErCommon_CreateWorkfolder(rInputRoot, rOutputRoot, rEnvironment);
	
	SET xComIbmDni = rTrace.xComIbmDni;
	
	-- Parse all headers to a bitstream as XML
	DECLARE J INTEGER CARDINALITY( rInputRoot.*[] );
	DECLARE I INTEGER;
	DECLARE chHdrId CHARACTER;
	DECLARE chHdrName CHARACTER;
	DECLARE xHeaders BLOB;
	DECLARE xTmp BLOB;
	DECLARE bEmptyPayload BOOLEAN FALSE;
	
	DECLARE rInputBody REFERENCE TO rInputRoot.*[<];

	IF (    (FIELDNAME(rInputBody) <> 'XMLNSC')
	    AND (FIELDNAME(rInputBody) <> 'BLOB')  ) THEN

		-- Save also last header if there's no payload; 
		SET rTrace.BodyName = FIELDNAME(rInputBody);
		SET J=J+1;
		SET bEmptyPayload = TRUE;
	END IF;

	SET xHeaders = '';
	SET I = 1;
	WHILE I < J DO
		SET xTmp = ASBITSTREAM( rOutputRoot.*[I] CCSID 1208 ENCODING rInputRoot.MQMD.Encoding );
		SET chHdrName = FIELDNAME( rOutputRoot.*[I] ) || ';';
		SET chHdrId = CAST( ( LENGTH( xTmp ) ) AS CHARACTER CCSID 1208 ) || ';';
		SET xHeaders = xHeaders || CAST( chHdrId AS BLOB CCSID 1208 ) || CAST( CAST( chHdrName AS CHARACTER CCSID 1208 ) AS BLOB CCSID 1208 ) || xTmp;
		SET I = I + 1;
	END WHILE;

	/*------------------------------------*\
	|  Prepare data for INSERT statements  |
	\*------------------------------------*/
	DECLARE rProperties    REFERENCE TO rEnvironment.ComIbmDni.Dnq.Properties;
	DECLARE rTmp           REFERENCE TO rEnvironment;
	DECLARE iEncoding      INT  rInputRoot.MQMD.Encoding;
	DECLARE chMsgType      CHAR rInputRoot.MQRFH2.ComIbmDni.MsgStandardInfo.Type;
	DECLARE chOu           CHAR rInputRoot.MQRFH2.ComIbmDni.OU;
	DECLARE chQueue        CHAR rInputLocalEnvironment.Destination.Dnq.DestinationData.QueueName;
	DECLARE chSchema       CHAR rEnvironment.Variables.ComIbmDni.Dnq.Properties.SchemaName; 
	DECLARE chQueueType    CHAR SUBSTRING( rInputLocalEnvironment.Destination.Dnq.DestinationData.QueueType FROM 1 FOR 1 );
	DECLARE chNextProcType CHAR SUBSTRING( rInputLocalEnvironment.Destination.Dnq.DestinationData.NextProcessingType FROM 1 FOR 1 );
	DECLARE chRemoteAddr   CHAR rProperties.RemoteAddress;
	DECLARE chDirection    CHAR rProperties.MessageDirection;
	DECLARE chPdIndicator  CHAR 'N';
	DECLARE chLocalAddr    CHAR;
	DECLARE chApplRef      CHAR '';
	DECLARE chValueDate    CHAR;
	DECLARE chStmtInsert1  CHAR;
	DECLARE chStmtInsert2  CHAR;
	DECLARE chStmtSelect   CHAR;
	DECLARE xMsgID         BLOB rInputRoot.MQMD.MsgId;
	DECLARE xPayload       BLOB;

	IF chDirection = 'I' THEN
		SET chDirection = 'S';
	ELSE
		IF chDirection = 'O' THEN
			SET chDirection = 'R';
		END IF;
	END IF;

	IF (LOWER(rProperties.PossibleDuplicate) = 'true') THEN
		SET chPdIndicator = 'Y';
	END IF;

	IF (NOT bEmptyPayload) THEN
		SET xPayload = ASBITSTREAM( rOutputRoot.*[<] CCSID rInputRoot.MQRFH2.CodedCharSetId );
	END IF;

	IF (rEnvironment.Variables.ComIbmDni.Dnq.NodeType = chNodeTypeFin) OR (chMsgDomain = 'DNIFIN') THEN

		/*----------------------*\
		|  Prepare data for FIN  |
		\*----------------------*/
		SET chValueDate = rProperties.DNIFIN.ValueDate;

		-- Set local address
		SET chLocalAddr = rProperties.LocalAddress;
		IF ((chLocalAddr IS NULL) OR (LENGTH(chLocalAddr) = 0)) THEN
			SET chLocalAddr = 'DNIUNPARSABLE';
		END IF;

		-- Set application reference based on config
		DECLARE rReferenceExtraction  REFERENCE TO rEnvironment.ComIbmDni.Properties.{chOu}.DnqEROUOptions.DnqEROUOptions.FINReferenceExtraction;
		DECLARE chReferenceExtraction CHAR '108,20'; -- default: ApplicationReference then TransactionReference

		-- only default ('108,20') and '20' are allowed options, otherwise raise event
		IF LASTMOVE(rReferenceExtraction) AND (LENGTH(rReferenceExtraction) > 0) THEN
			
			IF ((rReferenceExtraction = '20') OR (rReferenceExtraction = '108,20'))  THEN
				SET chReferenceExtraction = rReferenceExtraction;
			ELSE
				-- prepare config error event
				SET chFinRefConfigValue = rReferenceExtraction;
			END IF;
			
		END IF;
		
		SET rTrace.chReferenceExtraction = chReferenceExtraction;
		SET rTrace.chFinRefConfigValue = chFinRefConfigValue;

		IF (    (CARDINALITY(rProperties.DNIFIN.TransactionReference[]) > 0)
		    AND (LENGTH     (rProperties.DNIFIN.TransactionReference)   > 0)) THEN

			SET chApplRef = rProperties.DNIFIN.TransactionReference;
		END IF;

		IF (chReferenceExtraction = '108,20') AND
			((CARDINALITY(rProperties.DNIFIN.ApplicationReference[]) > 0) AND
			(LENGTH(rProperties.DNIFIN.ApplicationReference) > 0)) THEN

			SET chApplRef = rProperties.DNIFIN.ApplicationReference;
		END IF;
			IF (LENGTH(chApplRef) > 32) THEN
			SET chApplRef = SUBSTRING(chApplRef FROM 1 FOR 32);
		END IF;

	ELSE
		/*-----------------------*\
		|  Prepare data for MSIF  |
		\*-----------------------*/
		SET chValueDate = rProperties.DNIFUNDS.TradeDateTime;

		-- Set local address
		IF ((CARDINALITY(rProperties.LocalAddress[]) > 0) AND (LENGTH(rProperties.LocalAddress) > 0)) THEN
			SET chLocalAddr = rProperties.LocalAddress;
		ELSE
			IF (CARDINALITY(rEnvironment.Variables.ComIbmDni.Dnq.Properties.LocalAddress[]) > 0) THEN
				SET chLocalAddr = rEnvironment.Variables.ComIbmDni.Dnq.Properties.LocalAddress;
				SET rProperties.LocalAddress = chLocalAddr;
			ELSE
				THROW USER EXCEPTION SEVERITY 3 CATALOG 'dnqckmsg' MESSAGE 3014 VALUES( 'DNQK3014E' );
			END IF;
		END IF;

	END IF; -- switch on node type (FIN or MSIG)

	/*------------------------------------------------*\
	|  Insert general message data into DNQE_MESSAGES  |
	\*------------------------------------------------*/
	SET chStmtInsert1 = 'INSERT INTO ' || chSchema || '.DNQE_MESSAGES (' ||
		'STORETIME, EXTERNALID, OU, QUEUE, QUEUETYPE, ROUTINGREQ, LASTCHGUSER, MQHEADERENC, ' ||
		'MQHEADER, COMIBMDNI, PAYLOAD, LOCALADDRESS, REMOTEADDRESS, MSGDOMAIN, MSGTYPE, DIRECTION, POSSIBLEDUPLICATE) ' ||
		'VALUES( CURRENT TIMESTAMP - CURRENT TIMEZONE, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )';

	IF bUpdateMessage THEN
		SET chStmtInsert1 = 'UPDATE ' || chSchema || '.DNQE_MESSAGES SET (' ||
		'STORETIME, EXTERNALID, OU, QUEUE, QUEUETYPE, ROUTINGREQ, LASTCHGUSER, MQHEADERENC, ' ||
		'MQHEADER, COMIBMDNI, PAYLOAD, LOCALADDRESS, REMOTEADDRESS, MSGDOMAIN, MSGTYPE, DIRECTION, POSSIBLEDUPLICATE)' ||
		'=( CURRENT TIMESTAMP - CURRENT TIMEZONE, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ) WHERE ID=?';
	END IF;

	SET rTrace.chStmtInsert1  = chStmtInsert1;
	SET rTrace.xMsgID         = xMsgID;
	SET rTrace.chOu           = chOu;
	SET rTrace.chQueue        = chQueue;
	SET rTrace.chQueueType    = chQueueType;
	SET rTrace.chNextProcType = chNextProcType;
	SET rTrace.LASTCHGUSER    = 'NULL';
	SET rTrace.iEncoding      = iEncoding;
	SET rTrace.Headers        = xHeaders;
--	SET rTrace.xComIbmDni     = xComIbmDni; @P21C
	SET rTrace.xPayload       = xPayload;
	SET rTrace.chLocalAddr    = chLocalAddr;
	SET rTrace.chRemoteAddr   = chRemoteAddr;
	SET rTrace.chMsgDomain    = chMsgDomain;
	SET rTrace.chMsgType      = chMsgType;
	SET rTrace.chDirection    = chDirection;
	SET rTrace.chPdIndicator  = chPdIndicator;
	SET rTrace.iMsgId         = iMsgId;

	IF bUpdateMessage THEN
		PASSTHRU( chStmtInsert1, xMsgID, chOu, chQueue, chQueueType, chNextProcType, NULL,
			iEncoding, xHeaders, xComIbmDni, xPayload, chLocalAddr, chRemoteAddr, chMsgDomain, chMsgType, chDirection, chPdIndicator, iMsgId );
	ELSE
		PASSTHRU( chStmtInsert1, xMsgID, chOu, chQueue, chQueueType, chNextProcType, NULL,
			iEncoding, xHeaders, xComIbmDni, xPayload, chLocalAddr, chRemoteAddr, chMsgDomain, chMsgType, chDirection, chPdIndicator );
	END IF;
	
	/*----------------------*\
	|  Insert specific data  |
	\*----------------------*/

	IF (rEnvironment.Variables.ComIbmDni.Dnq.NodeType = chNodeTypeFin) OR (chMsgDomain = 'DNIFIN') THEN

		-- -----------------
		-- FIN specific data
		-- -----------------

		DECLARE chAmount    CHAR rProperties.DNIFIN.Amount;
		DECLARE chCurrency  CHAR rProperties.DNIFIN.Currency;
		DECLARE chPriority  CHAR rProperties.Priority;
		DECLARE iSessionId  INT  CAST( rProperties.DNIFIN.SessionId  AS INTEGER );
		DECLARE iISN        INT  CAST( rProperties.DNIFIN.SessionISN AS INTEGER );
		DECLARE iOSN        INT  CAST( rProperties.DNIFIN.SessionOSN AS INTEGER );
		
		SET rTrace.chStmtInsert2 = chStmtInsert2;
		SET rTrace.chApplRef     = chApplRef;
		SET rTrace.chValueDate   = chValueDate;
		SET rTrace.chAmount      = chAmount;
		SET rTrace.chCurrency    = chCurrency;
		SET rTrace.chPriority    = chPriority;
		SET rTrace.iSessionId    = iSessionId;
		SET rTrace.iISN          = iISN;
		SET rTrace.iOSN          = iOSN;
		SET rTrace.iMsgId        = iMsgId;

		SET chStmtInsert2 = 'INSERT INTO ' || chSchema || '.DNQE_ME_DNIFIN (' ||
			'ID, APPLREFERENCE, VALUEDATE, AMOUNT, CURRENCY, PRIORITY, SESSION, ISN, OSN) ' ||
			'VALUES( IDENTITY_VAL_LOCAL(), ?, ?, ?, ?, ?, ?, ?, ? )';

		IF bUpdateMessage THEN
			SET chStmtInsert2 = 'UPDATE ' || chSchema || '.DNQE_ME_DNIFIN SET (' ||
			'APPLREFERENCE, VALUEDATE, AMOUNT, CURRENCY, PRIORITY, SESSION, ISN, OSN)' ||
			'=( ?, ?, ?, ?, ?, ?, ?, ? ) WHERE ID=?';
		END IF;

		IF bUpdateMessage THEN
			PASSTHRU( chStmtInsert2, chApplRef, chValueDate, chAmount, chCurrency, chPriority, iSessionId, iISN, iOSN, iMsgId);
		ELSE
			PASSTHRU( chStmtInsert2, chApplRef, chValueDate, chAmount, chCurrency, chPriority, iSessionId, iISN, iOSN);
		END IF;

	ELSE
		-- ------------------
		-- MSIF specific data
		-- ------------------

		IF (chMsgDomain = 'DNIFUNDS') THEN

			-- Insert FUNDS fields
			DECLARE chUnits        CHAR rProperties.DNIFUNDS.Units;
			DECLARE chSecurityID   CHAR rProperties.DNIFUNDS.ID;
			DECLARE chOrderRef     CHAR rProperties.DNIFUNDS.OrderReference;
			DECLARE chSecurityStd  CHAR; -- rProperties.SecurityStandard;

			SET chStmtInsert2 = 'INSERT INTO ' || chSchema || '.DNQE_ME_DNIFUNDS (' ||
				'ID, VALUEDATE, UNITS, SECURITYID, SECSTANDARD, ORDERREFERENCE) ' ||
				'VALUES( IDENTITY_VAL_LOCAL(), ?, ?, ?, ?, ? )';

			IF bUpdateMessage THEN
				SET chStmtInsert2 = 'UPDATE ' || chSchema || '.DNQE_ME_DNIFUNDS SET (' ||
				'ID, VALUEDATE, UNITS, SECURITYID, SECSTANDARD, ORDERREFERENCE)' ||
				'=( ?, ?, ?, ?, ? ) WHERE ID=?';
			END IF;

			SET rTrace.chStmtInsert2 = chStmtInsert2;
			SET rTrace.chValueDate   = chValueDate;
			SET rTrace.chUnits       = chUnits;
			SET rTrace.chSecurityID  = chSecurityID;
			SET rTrace.chSecurityStd = chSecurityStd;
			SET rTrace.chOrderRef    = chOrderRef;
			SET rTrace.iMsgId        = iMsgId;

			IF bUpdateMessage THEN
				PASSTHRU( chStmtInsert2, chValueDate, chUnits, chSecurityID, chSecurityStd, chOrderRef, iMsgId );
			ELSE
				PASSTHRU( chStmtInsert2, chValueDate, chUnits, chSecurityID, chSecurityStd, chOrderRef );
			END IF;

		ELSEIF (chMsgDomain = 'DNIENI') THEN

			-- Insert ENI fields
			DECLARE chCaseId       CHAR rProperties.DNIENI.CaseId;
			DECLARE chCaseCreator  CHAR rProperties.DNIENI.CaseCreator;

			SET chStmtInsert2 = 'INSERT INTO ' || chSchema || '.DNQE_ME_DNIENI' ||
				'(ID, CASEID, CASECREATOR) ' ||
	            'VALUES( IDENTITY_VAL_LOCAL(), ?, ? )';

			IF bUpdateMessage THEN
				SET chStmtInsert2 = 'UPDATE ' || chSchema || '.DNQE_ME_DNIENI SET ' ||
				'(ID, CASEID, CASECREATOR)' ||
	            '=( ?, ? ) WHERE ID=?';
			END IF;

			SET rTrace.chStmtInsert2 = chStmtInsert2;
			SET rTrace.chCaseId      = chCaseId;
			SET rTrace.chCaseCreator = chCaseCreator;
			SET rTrace.iMsgId        = iMsgId;

			IF bUpdateMessage THEN
				PASSTHRU( chStmtInsert2, chCaseId, chCaseCreator, iMsgId );
			ELSE
				PASSTHRU( chStmtInsert2, chCaseId, chCaseCreator );
			END IF;

		END IF;
	END IF; -- switch on node type (FIN or MSIG)

	-- use different output terminal for config error event
	DECLARE chOutputTerminal CHAR 'out';
	IF (chFinRefConfigValue <> '') THEN
		
	    DECLARE chEvtTS CHAR CAST(CURRENT_GMTTIMESTAMP AS CHAR);
	    DECLARE iPos    INT  POSITION('''' in chEvtTS) + 1;
	    DECLARE evt     REFERENCE TO rOutputRoot;
		DECLARE chInst  CHAR rEnvironment.Variables.ComIbmDni.Dnq.Properties.Instance;
		
	    SET chEvtTS = SUBSTRING(chEvtTS FROM iPos FOR LENGTH(chEvtTS) - iPos);
	    SET chEvtTS = OVERLAY  (chEvtTS PLACING 'T' FROM 11);
	
	    -- Create a WBI FN event message
	    DELETE FIELD rOutputRoot.MQRFH2.ComIbmDni.Function.DniEvent.Store;
	    CREATE FIELD rOutputRoot.MQRFH2.ComIbmDni.Function.DniEvent.Store.Request AS evt;
	
	    SET evt.TimeStamp = chEvtTS;
	    SET evt.TimeStamp.(NameValue)dnidt = 'dateTime';
	
	    SET evt.EventId  = 'DNQK2014E';
	    SET evt.OU       = rOutputRoot.MQRFH2.ComIbmDni.OU;
	    SET evt.Service  = rEnvironment.ComIbmDni.Properties.Common.Service;
	    SET evt.SystemId = 'QM_' || rEnvironment.ComIbmDni.Properties.Common.QueueManager;
	    SET evt.MessageFlow    = rEnvironment.ComIbmDni.Properties.Common.MessageFlow;
	    SET evt.ExecutionGroup = rEnvironment.ComIbmDni.Properties.Common.ExecutionGroup;
	    SET evt.Broker         = rEnvironment.ComIbmDni.Properties.Common.Broker;
	    SET evt.ComponentName  = 'DNQK';
	    SET evt.SearchKey      = 'Exception';
	    SET evt.Parameter1     = chFinRefConfigValue;
	    SET evt.Parameter2     = '108,20';
		
		-- address event queue
		SET rOutputLocalEnvironment.Destination.MQ.DestinationData.queueName = chInst || '.SYSOU.DNI_R_EVENT';
		
		SET chOutputTerminal = 'out1';
	END IF;
	
	SET rTrace.chOutputTerminal = chOutputTerminal;

	DELETE FIELD rEnvironment.Variables.ComIbmDni.Dnq.Tmp;

END;